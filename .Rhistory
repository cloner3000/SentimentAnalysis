words <- findFreqTerms(doc, lowfreq=1)}
words
index <- pmatch(words[1],lexicon[,1],nomatch=0)
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
pstrong=0.5
pweak=1.0
prior=1.0
scores
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
scores
for (key in names(scores)) {
count <- counts[[key]]
total <- counts[["total"]]
score <- abs(log(count/total))
scores[[key]] <- scores[[key]]+score
}
scores
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)}
for (word in words) {
index <- pmatch(word,lexicon[,1],nomatch=0)
#mendapatkan nomor urutan keberapa di dataset naive bayes
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score gabung awal
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
}
#untuk menghitung nilai naive bayes suatu tweet
#score gabung di tambah score base
for (key in names(scores)) {
count <- counts[[key]]
total <- counts[["total"]]
score <- abs(log(count/total))
scores[[key]] <- scores[[key]]+score
}
pweak=1.0
prior=1.0
pstrong=0.5
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
#cek kata
for (word in words) {
index <- pmatch(word,lexicon[,1],nomatch=0)
#mendapatkan nomor urutan keberapa di dataset naive bayes
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score gabung awal
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
}
}
scores
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
matrix <- classify.dtm(sentences[20,])
pweak=1.0
pstrong=0.5
prior=1.0
for (key in names(scores)) {
count <- counts[[key]]
total <- counts[["total"]]
score <- abs(log(count/total))
scores[[key]] <- scores[[key]]+score
}
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)}
count <- counts[[category]]
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
count()
count
count <- counts[[category]]
View(lexicon)
for (key in names(scores)) {
count <- counts[[key]]
total <- counts[["total"]]
score <- abs(log(count/total))
scores[[key]] <- scores[[key]]+score
}
scores
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
abs(log(1157 / 3266))
abs(log(2106 / 3266))
abs(log(1*1/1157)
abs(log(1*1/1157) )
abs(log(1/1157))
log(1/1157)
sentences<-read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
View(sentences)
TweetTarik <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
View(TweetTarik)
sentences<-read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
matrix <- classify.dtm(sentences[20,)
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)}
library(tm)
library(RTextTools)
library(e1071)
library(dplyr)
library(caret)
sentences<-read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
library(tm)
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
sentences<-read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
sentences<-read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
pstrong=0.5
pweak=1.0
prior=1.0
matrix <- classify.dtm(sentences)
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
sentences<-read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"")
pweak=1.0
prior=1.0
pstrong=0.5
matrix <- classify.dtm(sentences[20,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),
negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)}
index <- pmatch(word[1],lexicon[,1],nomatch=0)
index <- pmatch(words[1],lexicon[,1],nomatch=0)
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
scores
score
View(sentences)
words[1]
View(lexicon)
abs(log(0.5*1/1157))
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
cleanFun <- function(htmlString) {
return(gsub("<.*?>", "", htmlString))
}
cleanfun(<a href="http://twitter.com/download/android" rel="nofollow">Twitter for Android</a>)
f<-"<a href="http://twitter.com/download/android" rel="nofollow">Twitter for Android</a>"
f<-c("<a href="http://twitter.com/download/android" rel="nofollow">Twitter for Android</a>")
f=c("<a href="http://twitter.com/download/android" rel="nofollow">Twitter for Android</a>")
removeURL <- function(x) gsub("http[[:alnum:][:punct:]]*", "", x)
tes=removeURL(<a href="http://twitter.com/download/android" rel="nofollow">Twitter for Android</a>)
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
TweetTarik_df <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik_df.txt", row.names=1, quote="\"")
View(TweetTarik_df)
TweetTarik_df <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik_df.txt", quote="\"")
View(TweetTarik_df)
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
f<-c(3,4,5)
f
f(order)
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
abs(log(1160/3271))
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences)
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences[44,])
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences)
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences[44,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),                      negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
abs(log(1160/3272))
abs(log(2108/3272))
= abs(log(0.5*1/2108))
abs(log(0.5*1/2108))
View(lexicon)
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)}
words
entry <- lexicon[words[1]]
index <- pmatch(words[1],lexicon[,1],nomatch=0)
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
score
scores
View(lexicon)
abs(log(0.5*1/1160))
index <- pmatch(words[2],lexicon[,1],nomatch=0)
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
scores
words
index <- pmatch(words[3],lexicon[,1],nomatch=0)
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
scores
index <- pmatch(words[4],lexicon[,1],nomatch=0)
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
scores
abs(log(1*1/1160))
words
7.056175+7.056175+7.056175+7.749322+7.749322+7.749322
abs(log(1160/3272))
abs(log(2108/3272))
44.41649 + 1.036981
runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
7.749322+7.749322+7.749322+7.056175+7.056175+7.056175
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences[44,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),                      negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
}
index <- pmatch(words[1],lexicon[,1],nomatch=0)
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
scores
for (word in words) {
index <- pmatch(word,lexicon[,1],nomatch=0)
#mendapatkan nomor urutan keberapa di dataset naive bayes
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
}
scores
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences[44,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),                      negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
}
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
#cek kata
for (word in words) {
index <- pmatch(word,lexicon[,1],nomatch=0)
#mendapatkan nomor urutan keberapa di dataset naive bayes
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
}
}
scores
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences[44,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),                      negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
}
words
index <- pmatch(words[1],lexicon[,1],nomatch=0)
if (index > 0) {
entry <- lexicon[index,]
polarity <- as.character(entry[[2]])
category <- as.character(entry[[3]])
count <- counts[[category]]
# hitung score join per kata
score <- pweak
if (polarity == "strongsubj") score <- pstrong
score <- abs(log(score*prior/count))
scores[[category]] <- scores[[category]]+score
}
scores
View(lexicon)
abs(log(1*1/1162))
7.057898+7.057898+7.057898+ 7.751045+7.751045+7.751045
abs(log(1162/3274))
abs(log(2108/3274))
abs(log(0.5*1/2108))
8.346642 + 0.4402728
44.42683 + 1.03587
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
matrix <- classify.dtm(sentences[329,])
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
View(sentences)
matrix <- classify.dtm(sentences[328,])
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),                      negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
}
words
View(lexicon)
abs(log(0.5*1/1162))
abs(log(0.5*1/2108))
abs(log(0.5*1/2108))
abs(log(1*1/1162))
8.346642+8.346642+8.346642+8.346642
7.057898+7.057898+ 7.751045
33.38657+ 0.4402728
21.86684+ 1.03587
sentences <- read.table("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/TweetTarik.txt", quote="\"", comment.char="")
pstrong=0.5
prior=1.0
pweak=1.0
lexicon  <- read.csv("~/Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah/backup sentiment/indo/subjectivity2.csv", header=FALSE, sep=";")
counts <- list(positive = length(which(lexicon[,3]=="positive")),                      negative = length(which(lexicon[,3]=="negative")),
total = nrow(lexicon))
View(lexicon)
View(lexicon)
matrix <- classify.dtm(sentences[320,])
for (i in 1:nrow(matrix)) {
scores <- list(positive=0, negative=0)
doc <- matrix[i,]
words <- findFreqTerms(doc, lowfreq=1)
}
words
abs(log(1*1/1160))
abs(log(0.5*1/1160))
abs(log(1162/3274))
abs(log(0.5*1/2108))
abs(log(2108/3274))
abs(log(1162/3274))
abs(log(0.5*1/1162))
abs(log(1*1/1162))
7.057898+7.057898+7.751045
21.86684 + 1.03587
abs(log(0.5*1/1162))
abs(log(1*1/2108))
7.751045+ 1.03587
7.653495 + 0.4402728
shiny::runApp('Rstudio/Sentiment Analysis lib - MochamadFerdyOktaviansyah')
